{"version":3,"sources":["components/Alert.js","components/AddNewBook.js","components/Modal.js","components/BookItem.js","components/BookList.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faCheck","Alert","this","props","showAlert","errorNew","className","icon","size","type","data-dismiss","aria-label","aria-hidden","React","Component","AddNewBook","state","setFocus","titleInput","focus","setState","setTimeout","handleAdd","handleChange","author","title","description","id","data-toggle","href","onClick","data-parent","onSubmit","event","htmlFor","value","name","ref","input","aria-describedby","onChange","authorInput","rows","resetInputs","Modal","delItemId","delItemName","handleDelete","faEllipsisV","BookItem","books","handleUpdate","getDeleteModal","errorUpd","selectItem","activeItemId","defaultValue","data-target","BookList","activeId","map","key","apiEndpoint","App","target","a","async","preventDefault","handleValidation","bookObj","axios","post","book","data","console","error","handleValidationUpd","put","index","indexOf","delete","filter","b","get","response","log","getBooks","formIsValid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f66b3fd.chunk.js","sourcesContent":["import React from 'react';\r\nimport {library} from '@fortawesome/fontawesome-svg-core';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faCheck} from '@fortawesome/free-solid-svg-icons';\r\nimport '../styles/Alert.scss';\r\n\r\nlibrary.add(faCheck);\r\n\r\nclass Alert extends React.Component {\r\n\r\n    render() {\r\n\r\n      const {showAlert, errorNew} = this.props;\r\n      const alertTxt = \"New Book added to the list\";\r\n\r\n            return (\r\n              <span>\r\n              {(showAlert && !errorNew) &&\r\n                         <div className={`alert alert-success ${showAlert ? 'alert-shown' : 'alert-hidden'}`}>\r\n                           <strong>Saved!&nbsp;</strong>{alertTxt}&nbsp;&nbsp;<FontAwesomeIcon icon={faCheck} size=\"lg\"/>\r\n                           <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\r\n                         </div>}\r\n              </span>\r\n             );\r\n\r\n    }\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react';\r\nimport Alert from './Alert';\r\nimport '../styles/AddNewBook.scss';\r\n\r\nclass AddNewBook extends React.Component {\r\n\r\nstate = {\r\n    showAlert: false,\r\n}\r\n\r\n//to bring tho focus to the first input field\r\nsetFocus = () => {\r\n    this.titleInput.focus();\r\n}\r\n\r\n//success alert displayd if there are no errors\r\nshowAlert = (errorNew) => {\r\n    if(!errorNew){\r\n    this.setState({\r\n      showAlert: true,\r\n    });\r\n\r\n    setTimeout(() => {\r\n      this.setState({\r\n        showAlert: false\r\n      });\r\n    }, 2000);\r\n\r\n    this.setFocus();\r\n   }\r\n}\r\n\r\n  render() {\r\n\r\n    const {handleAdd, handleChange, author, title, description, errorNew} = this.props;\r\n    const errorTxt = \" - This field cannot be empty!\";\r\n\r\n    return (\r\n        <div id=\"accordion1\">\r\n          <Alert\r\n              showAlert={this.state.showAlert}\r\n              errorNew={errorNew}\r\n              />\r\n          <div className=\"card\">\r\n           <div id=\"add-hdr\" className=\"card-header\">\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg btn-block add-btn\" data-toggle=\"collapse\" href=\"#collapseNew\" onClick={this.setFocus}>Add New Book</button>\r\n            </div>\r\n              <div id=\"collapseNew\" className=\"collapse\" data-parent=\"#accordion1\">\r\n                      <div className=\"card-body\">\r\n                          <form onSubmit={(event) => handleAdd(event)}>\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor=\"title\" className={errorNew ? 'text-danger' : ''}>Title {errorNew && <small id=\"titleHelp\" className=\"text-danger\">\r\n                                {errorTxt}</small>}</label>\r\n                              <input value={title} name=\"title\" ref={(input) => {this.titleInput = input;}} className={errorNew ? 'form-control is-invalid' : 'form-control'} id=\"title\" aria-describedby=\"titleHelp\"\r\n                              onChange={(event) => handleChange(event)} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor=\"author\">Author</label><small>&nbsp; (optional)</small>\r\n                              <input ref={(input) => {this.authorInput = input;}} name=\"author\" className=\"form-control\" id=\"author\"\r\n                              value={author} onChange={(event) => handleChange(event)} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor=\"description\">Description</label><small>&nbsp; (optional)</small>\r\n                              <textarea value={description} name=\"description\" className=\"form-control\" id=\"description\" rows=\"3\" onChange={(event) => handleChange(event)}></textarea>\r\n                            </div>\r\n                            <div className=\"form-group float-right\">\r\n                              {/* <button type=\"button\" className=\"btn btn-secondary mr-3\" onClick={this.props.resetInputs}>Clear</button> */}\r\n                              <button type=\"button\" data-toggle=\"collapse\" href=\"#collapseNew\" className=\"btn btn-default mr-3\" onClick={this.props.resetInputs}>Cancel</button>\r\n                              <button type=\"submit\" className=\"btn btn-success save-btn\" onClick={() => this.showAlert(errorNew)}>Save New</button>\r\n                            </div>\r\n                          </form>\r\n                     </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n        }\r\n}\r\n\r\nexport default AddNewBook;\r\n","import React from 'react';\r\nimport '../styles/Modal.scss';\r\n\r\nclass Modal extends React.Component {\r\n\r\n    render() {\r\n\r\n      const {delItemId, delItemName, handleDelete} = this.props;\r\n      const hdrTxt = \"Delete Book\";\r\n      const modalTxt = \"Are you sure you want to delete this item?\";\r\n\r\n        return (<div className=\"modal fade\" id=\"deleteModal\">\r\n          <div className=\"modal-dialog\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h4 className=\"modal-title\">{hdrTxt}</h4>\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <p>{modalTxt}</p>\r\n                <span className=\"font-weight-bold\">{delItemName}</span>\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button type=\"button\" className=\"btn btn-default\" data-dismiss=\"modal\">Cancel</button>\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleDelete(delItemId)} data-dismiss=\"modal\">Yes</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport Modal from './Modal';\r\nimport '../styles/BookItem.scss';\r\nimport {library} from '@fortawesome/fontawesome-svg-core';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEllipsisV} from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faEllipsisV);\r\n\r\nclass BookItem extends React.Component {\r\n\r\n    render() {\r\n\r\n    const {books, handleUpdate, getDeleteModal, errorUpd, selectItem, activeItemId} = this.props;\r\n    const errorTxt = \" - This field cannot be empty!\";\r\n\r\n        return (\r\n          <div  id={books.id} className=\"card book\">\r\n           <a className={'card-link ' + (books.id === activeItemId ? 'active' : '')} data-toggle=\"collapse\"\r\n           href={\"#row\" + books.id} onClick={selectItem}>\r\n            <div className=\"card-header\">\r\n                 <span className=\"titleName pr-3\">{books.title}</span><span className=\"authorName\">{books.author}</span>\r\n                 <span id=\"ellipsis\" className=\"float-right\"><FontAwesomeIcon icon={faEllipsisV}/></span>\r\n            </div>\r\n            </a>\r\n            <div id={\"row\" + books.id} className=\"collapse\" data-parent=\"#accordion2\">\r\n              <div className=\"card-body\">\r\n                  <form onSubmit={(event) => handleUpdate(event)}>\r\n                    <div className=\"form-group\">\r\n                    <label htmlFor=\"title\" className={errorUpd ? 'text-danger' : ''}>Title {errorUpd && <small className=\"text-danger\">\r\n                    {errorTxt}</small>}</label>\r\n                      <input className={errorUpd ? 'form-control is-invalid' : 'form-control'} name=\"title\" aria-describedby=\"titleHelp\" defaultValue={books.title}/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"author\">Author</label><small>&nbsp; (optional)</small>\r\n                      {/*uncontrolled since defaultValue is in use*/}\r\n                      <input className=\"form-control\" name=\"author\"  defaultValue={books.author} />\r\n                      <input type=\"hidden\" className=\"form-control\" name=\"id\" value={books.id}/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"description\">Description</label><small>&nbsp; (optional)</small>\r\n                      <textarea className=\"form-control\" name=\"description\" rows=\"3\" defaultValue={books.description}></textarea>\r\n                    </div>\r\n                    <div className=\"form-group float-right\">\r\n                    <button onClick={() => getDeleteModal(books)} data-toggle=\"modal\"\r\n                    data-target=\"#deleteModal\" type=\"button\" className=\"btn btn-danger mr-3\">Delete</button>\r\n                      <button type=\"submit\" className=\"btn btn-success save-btn\">Save Changes</button>\r\n                    </div>\r\n                  </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default BookItem;\r\n","import React from 'react';\r\nimport Modal from './Modal';\r\nimport BookItem from './BookItem';\r\nimport '../styles/BookList.scss';\r\n\r\n\r\nclass BookList extends React.Component {\r\n\r\nstate = {\r\n        delItemName: '', //state property to hold item name to be deleted\r\n        delItemId: null, //state property to hold item id to be deleted\r\n        activeItemId: null //state property to hold selected item\r\n          }\r\n\r\n/*id and name of the item to be deleted\r\nto be displayed in the confirmation modal*/\r\n  getDeleteModal = (books) => {\r\n    this.setState ({\r\n      delItemName: books.title,\r\n      delItemId: books.id,\r\n    })\r\n  }\r\n\r\n//highlights selected item in the list\r\n  selectItem(activeId) {\r\n    if(this.state.activeItemId !== activeId) {\r\n    this.setState({ activeItemId: activeId });\r\n  }\r\n  else {\r\n    this.setState({ activeItemId: null });\r\n  }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const {books, errorUpd} = this.props;\r\n\r\n    return (<div id=\"accordion2\">\r\n             {books.map((books) => (\r\n                 <BookItem\r\n                    books={books}\r\n                    handleUpdate={this.props.handleUpdate}\r\n                    getDeleteModal={this.getDeleteModal}\r\n                    errorUpd={errorUpd}\r\n                    activeItemId={this.state.activeItemId}\r\n                    selectItem={() => this.selectItem(books.id)}\r\n                    key={books.id}\r\n                    />\r\n                ))}\r\n\r\n               <Modal handleDelete={this.props.handleDelete}\r\n                       delItemId={this.state.delItemId}\r\n                       delItemName={this.state.delItemName}\r\n                       />\r\n           </div>\r\n         );\r\n        }\r\n}\r\n\r\nexport default BookList;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport AddNewBook from './components/AddNewBook';\r\nimport BookList from './components/BookList';\r\nimport './styles/App.scss';\r\n//const apiEndpoint = 'http://localhost:5000/books';\r\n//ao toimi osin\r\n//const apiEndpoint = 'https://my-json-server.typicode.com/sparkki/book-list/books/';\r\nconst apiEndpoint = 'https://my-json-server.typicode.com/sparkki/db';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    author: \"\",\r\n    title: \"\",\r\n    description: \"\",\r\n    books: [],\r\n    errorNew: false,\r\n    errorUpd: false,\r\n  }\r\n\r\nasync getBooks() {\r\n    try {\r\n      const response = await axios.get(apiEndpoint);\r\n      this.setState({\r\n        books: response.data\r\n      });\r\n       console.log(response);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n}\r\n\r\ncomponentDidMount() {\r\n    this.getBooks();\r\n}\r\n\r\nhandleChange = (event) => {\r\n    this.setState({\r\n         [event.target.name]: event.target.value,\r\n         errorNew: false,\r\n    });\r\n}\r\n\r\nhandleAdd = async (event) => {\r\n    event.preventDefault();\r\n    if(this.handleValidation()){\r\n          const bookObj = {\r\n            author: this.state.author,\r\n            title: this.state.title,\r\n            description: this.state.description\r\n          };\r\n      try{\r\n          const { data: book } = await axios.post(apiEndpoint, bookObj);\r\n          const books = [...this.state.books, book];\r\n          this.setState({\r\n            books: books,\r\n            author: \"\",\r\n            title: \"\",\r\n            description: \"\",\r\n            errorNew: false,\r\n          });\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n}\r\n\r\nhandleUpdate = async (event) => {\r\n     // event.preventDefault();\r\n     const bookObj = {\r\n       id: event.target.id.value,\r\n       author: event.target.author.value,\r\n       title: event.target.title.value,\r\n       description: event.target.description.value\r\n     };\r\n\r\n    if(this.handleValidationUpd(event)){\r\n      try {\r\n        const {data} = await axios.put(apiEndpoint + '/' + bookObj.id, bookObj);\r\n        const books = [...this.state.books];\r\n        const index = books.indexOf(bookObj);\r\n         books[index] = bookObj;\r\n         this.setState({ books: books, errorUpd: false });\r\n       } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n      else if (!this.handleValidationUpd(event) && !bookObj.title) {\r\n        event.preventDefault();\r\n      }\r\n}\r\n\r\n\r\nhandleDelete = async id => {\r\n    try {\r\n      await axios.delete(apiEndpoint + '/' + id);\r\n      const books = this.state.books.filter(b => b.id !== id);\r\n      this.setState({ books });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n}\r\n\r\nresetInputs = () => {\r\n    this.setState({\r\n      author: \"\",\r\n      title: \"\",\r\n      description: \"\",\r\n      errorNew: false,\r\n    });\r\n}\r\n\r\n//at least title must be filled in\r\nhandleValidation(){\r\n        let titleNew = this.state.title;\r\n        let formIsValid = true;\r\n\r\n        if(!titleNew){\r\n           formIsValid = false;\r\n           this.setState({\r\n             errorNew: true,\r\n           });\r\n        }\r\n        return formIsValid;\r\n}\r\n\r\n/*\r\nat least title must be filled in\r\nthis function is needed since update is implemented\r\nwithout state property (due to defaultValues in input fields)\r\n*/\r\nhandleValidationUpd(event) {\r\n         let titleUpd = event.target.title.value;\r\n         let formIsValid = true;\r\n\r\n         if(!titleUpd){\r\n           formIsValid = false;\r\n           this.setState({\r\n             errorUpd: true,\r\n           });\r\n         }\r\n         return formIsValid;\r\n}\r\n\r\n\r\nrender() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div className=\"container\">\r\n        <h1 id=\"app-hdr\">Book List</h1>\r\n         <AddNewBook\r\n             handleAdd={this.handleAdd}\r\n             handleChange={this.handleChange}\r\n             resetInputs={this.resetInputs}\r\n             author={this.state.author}\r\n             title={this.state.title}\r\n             description={this.state.description}\r\n             errorNew={this.state.errorNew}\r\n          />\r\n         <BookList\r\n             books={this.state.books}\r\n             handleUpdate={this.handleUpdate}\r\n             handleDelete={this.handleDelete}\r\n             errorUpd={this.state.errorUpd}\r\n          />\r\n         </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport './styles/index.scss';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport $ from 'jquery';\r\nimport Popper from 'popper.js';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}